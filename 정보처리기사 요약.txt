정보처리기사 중요부분 요약


1. 소프트웨어 생명주기 모델(SDLC: Software Development Life Cycle)
  ㄴ 소프트웨어 생명주기는 시스템의 요구분석부터 유지보수까지 전 공정을 체계화한 절차.
  
 가. 소프트웨어 생명주기 모델 프로세스
  ㅇ 요설구테유
    - 요구사항 분석 -> 설계 -> 구현 -> 테스트 -> 유지보수 

 나. 소프트웨어 생명주기 모델 종류
   ㅇ 폭프나반: 폭포수 모델, 프로토타이핑 모델, 나선형 모델, 반복적 모델
     1) 폭포수 모델
      - 폭포수 모델은 가장 오래된 모델이자 순차적 모형, 성공 사례가 많고 산출물이 명확하지만 요구사항 변경이 어려움 
      - 절차: 타당성 검토 -> 계획 -> 요구사항 분석 -> 설계 -> 구현 -> 테스트 -> 유지보수
  
     2) 나선형 모델
      - 시스템 개발 시 위험을 최소화 하기 위해 점진적으로 완벽한 시스템으로 개발해나가는 모델
      - 절차: 계획 및 정의 -> 위험 분석 -> 개발 -> 고객 평가
  
     3) 프로토 타이핑 모델 
      - 고객이 요구한 주요 기능을 프로토타입으로 구현하여, 고객의 피드백을 반영하여 소프트웨어를 만들어가는 모델
      - 프로토 타입은 발주자나 개발자 모두에게 공동의 참조모델 제공
   
     4) 반복적 모델
      - 구축 대상을 나누어 병렬적으로 개발 후 통합하거나, 반복적을 개발하여 점증 완성시키는 모델

 다. 소프트웨어 개발 방법론
  ㄴ 소프트웨어 개발 방법론은 소프트웨어 개발 전 과정에 지속적으로 적용할 수 있는 방법, 절차, 기법이다.
    SW를 하나의 생명체로 간주하고 개발의 시작부터 시스템을 사용하지 않는 과정까지의 전 과정 형상화
  
   ㅇ 소프트웨어 개발 방법론 종류
     - 구정객컴애제: 구조적, 정보공학, 객체지향, 컴포넌트 기반, 애자일, 제품 계열 방법론
   가. 구조적 방법론
     - 전체 시스템을 기능에 따라 나누어 개발하고, 이를 통합하는 분할과 정복  접근 방식의 방법론
     - 프로세스 중심의 하향식 방법론
     - 나씨-슈나이더만 차트 사용(논리의 기술에 중점을 둔 도형식 표현 방법, 연속, 선택 및 다중선택, 반복 등의 제어 논리 구조로 표현, 조건이 복합되어 있는 곳의 처리를 시각적으로 명확히 식별하는데 적합)
   나. 정보공학 방법론
     - 정보시스템 개발에 필요한 관리 절차와 작업 기법을 체계화한 방법론
     - 개발 주기를 이용해 대형 프로젝트를 수행하는 체계적인 방법론
   다. 객체지향 방법론
     - 객체라는 기본 단위로 시스템을 분석 및 설계하는 방법론
     - 복잡한 현실 세계를 사람이 이해하는 방식으로 시스템에 적용, 객체, 클래스, 메시지 사용ㅓㅓ
   라. 컴포넌트 기반 방법론
     - 소프트웨어를 구성하는 컴포넌트를 조립해서 하나의 새로운 응용 프로그램을 작성하는 방법론
     - 개발 기간 단축으로 생산성 향상, 새로운 기능 추가 쉬움, 소프트웨어 재사용 가능
   마. 애자일 방법론
     - 절차보다는 사람이 중심이 되어 변화에 유연하고 신속하게 적응하면서 효율적으로 시스템을 개발할 수 있는 신속 적응적 경량 개발방법론
     - 애자일은 개발 과정의 어려움을 극복하기 위해 적극적으로 모색한 방법론
   바. 제품 계열 방법론
     - 특정 제품에 적용하고 싶은 공통된 기능을 정의하여 개발하는 방법론
     - 임베디드 소프트웨어를 작성하는 데 유용한 방법론
     
  ㅁ 애자일 방법론의 개념
   ㅇ 애자일 방법론은 절차보다는 사람이 중심이 되어 변화에 유연하고 신속하게 적응하면서 효율적으로 시스템을 개발할 수 있는 신속 적응적 경량 개발 방법론이다.
   ㅇ 개발기간이 짧고 신속하며, 폭포수 모형에 대비되는 방법론으로 개발과 함께 즉시 피드백을 받아서 유동적으로 개발할 수 있다. 
   
   ㅇ 애자일 방법론은 대표적으로 XP, 린(Learn), 스크럼(SCRUM) 등이 있다.
   ㅇ XP(extrema Programming)
    - XP의 5가지 가치: 용단의피존(용기, 단순성, 의사소통, 피드백, 존중)
    - XP 12가지 기본원리: 짝 프로그래밍, 공동 코드 소유, 지속적인 통합, 계획 세우기, 작은 릴리즈, 메타포어, 간단한 디자인, 테스트 기반 개발, 리팩토링, 40시간 작업, 고객 상주, 코드 표준
   ㅇ 스크럼
    - 백로그, 스프린트, 스크럼 미팅, 스크럼 마스터, 스프린트 회고, 번 다운 차트
   ㅇ 린
    - 도요타의 린 시스템 품질 기법을 소프트웨어 개발 프로세스에 적용해서 낭비 요소를 제거하여 품질을 향상시킨 방법론
    - JIT, 칸반 보드 사용
    - 7가지 원칙: 낭품지늦빠사전 - 낭비제거, 품질 내재화, 지식 창출, 늦은 확정, 빠른 인도, 사람 존중, 전체 최적화

2. 비용산정 모형
  ㄴ 비용산정 모형은 소프트웨어 규모파악을 통한 투입자원, 소요시간을 파악하여 실행 가능한 계획을 수립하기 위해 비용을 산정하는 방식이다.
  ㄴ 하향식 산정방법, 상향식 산정방법이 있다.
  ㄴ 하향식 산정 방법에는 델파이 기법, 전문가 판단이 있다.
  
  ㄴ 상향식 산정방법에는 코드라인 수(Loc), Man Month COCOMO 푸트남 기능점수(FP)모형이 있따.

  가. Loc(Lines of Code) 모형: 소프트웨어 각 기능의 원시 코드 라인 수의 낙관치, 중간치, 비관치를 측정하여 예측치를 구하여 비용을 산정하는 방식, 측정이 쉽고 이해하기 쉬워 많이 사용된다.
  낙관치 + 4중간치 + 비관치 / 6

  나. Moan Month 모형은 한 사람이 1개월 동안 할 수 있는 일의 양을 기준으로 프로젝트 비용을 산정하는 방식
     MM = Loc/월간 생산성, 프로젝트 기간 = MM/프로젝트 인력
  다. COCOMO 모형: 보헴이 제안한 ㅁ형으로 프로그램 규모에 따라 비용을 산정하는 방식. 비용산정 결과는 Man Month로 산정
     규모에 따라 조직형, 반분리형, 임베디드형으로 나뉜다.(Organic, Semi-Detached, Embedded)
  라. 푸트남 모형: 소프트웨어 개발주기의 단계별로 요구할 인력의 분포를 가정하는 방식, 푸트남이 제안한 것으로 생명주기 예측 모형이라고 한다. Rayleigh-Norden 곡선의 노력 분포도를 기준으로 한다.
  마. 기능점수(Function Point) 모형: 요구 기능을 증가시키는 인자별로 가중치를 부여하고, 요인별 가중치를 합산하여 총 기능점수 계산하여 비용을 산정하는 방식 경험을 바탕으로 단순, 보통, 복잡에 따라 가중치 부여
  
3. 일정관리 모델
주 공정법, PERT, 중요 연쇄 프로젝트 관리가 있다.
CPM 일정계산 - 가장 긴 경로 계싼
PERT - 비관치, 중간치, 낙관치의 3점 추정방식을 통해 일정을 관리하는 기법
CCPM - CPM으로 자원제약사항을 고려하여 일정을 작성

4. 소프트웨어 아키텍쳐
 ㄴ 소프트웨어 아키텍처는 여러가지 소프트웨어 구성요소와 그 구성요소가 가진 특성 중에서 외부에 드러나는 특성, 그리고 구성요소 간의 관계를 표현하는 시스템의 구조나 구조체이다.
 ㄴ 소프트웨어 아키텍쳐 프레임워크: 소프트웨어 집약적인 시스템에서 아키텍처가 표현해야하는 내용 및 이들 간의 관계를 제공하는 아키텍처 기술 표준이다.
 ㄴ 소프트웨어 아키텍처 구성요소: 아키텍처 명세서, 이해관계자, 관심사, 관점, 뷰, 근거, 목표, 환경, 시스템

5. 소프트웨어 아키텍처 4+1뷰
 ㄴ 고객의 요구사항을 정리해 놓은 시나리오를 4개의 관점에서 바라보는 소프트웨어적인 접근 방법
 ㄴ 4개의 분리된 구조로 구성되는 아키텍처 개념을 제시하고, 서로 충돌되거나 요구사항 충족을 증명하기 위해 유스케이스를 사용
 ㄴ 구성요소: 유논프구배(유스케이스뷰, 논리뷰, 프로세스뷰, 구현뷰, 배포뷰)

6. 소프트웨어 아키텍처 패턴
 ㄴ 소프트웨어를 설계할 때 참조할 수 있는 전형적인 해결 방식.
 ㄴ 일반화되고 재사용 가능한 솔루션
 ㄴ 패턴유형: 계층화 패턴, 클라이언트-서버 패턴, 파이프-필터 패턴, 브로커 패턴, 모델-뷰-컨트롤러 패턴(MVC)

7. 소프트웨어 아키텍처 비용 평가 모델
 ㄴ SAAM, ATAM, CBAM, ADR, ARID

8. 디자인 패턴
 ㄴ 소프트웨어 설계에서 공통으로 발생하는 문제에 대해 자주 쓰이는 설계 방법을 정리한 패턴
 ㄴ 개발 효율성, 유지보수성, 운용성, 프로그램 최적화
 ㄴ 구성요소: 패문솔 사결샘(패턴의 이름, 문제 및 배경, 솔루션, 사례, 결과, 샘플코드)

9. 디자인 패턴 유형
 목적 - 생성, 구조, 행위 / 범위 - 클래스, 객체

10. 디자인 패턴 종류
 생성 - Builder, Prototype, Factory Method, Abstract Factory, Singleton
 구조 - Bridge, Decorator, Facade, Flyweight, Proxy, Composite, Adapter
 행위 - Mediator, Interpreter, Iterator, Template Method, Observer, State, Visitor, Command, Strategy, Memento, Chain of Responsibility

11. 현행 시스템 분석서 작성 및 검토
 ㄴ 분석 산출물의 종류: 현기인 아소하네(정보시스템 구성 현황, 정보 시스템 기능 구성도, 인터페이스 현황, 현행 시스템 아키텍처 구성도, 소프트웨어 구성도, 하드웨어 구성도, 네트워크 구성도)
 ㄴ 각 구성도의 사례 확인

12. 운영체제 개념: 컴퓨터 시스템이 제공하는 모든 하드웨어, 소프트웨어를 사용할 수 있도록 해주고, 사용자와 하드웨어간 인터페이스 담당
 ㄴ 현행 시스템 분석
   품질측면 - 신뢰도, 성능
   지원측면 - 기술지원, 주변기기, 구축비용

13. 운영체제 종류 및 특징
 ㄴ PC - 윈도우, 유닉스, 리눅스 / 모바일 - 안드로이드, iOS

14. 네트워크 현행 시스템 분석
 ㄴ 네트워크 개념: 컴퓨터 장치들의 노드 간 연결(데이터 링크)을 사용하여 서로에게 데이터를 교환할 수 있도록 하는 기술
 OSI 7계층: 네트워크 통신에서 생긴 여러가지 충돌 문제를 완화하기 위해 국제 표준화 기구(ISO)에서 제시한 네트워크 기본 모델

 OSI 7계층 구성요소: Application, Presentation, Session, Transport, Network, Data Link, Physical
 
 네트워크 현행 시스템 분석: 네트워크 구조를 구성도를 통해 분석
 백본망, 라우터, 스위치, 게이트웨이, 방화벽 등을 대상으로 분석

15 DBMS 형행 시스템 분석
 - 가성호기구(성능 측면 - 가용성, 성능, 상호 호환성 / 지원 측면 - 기술 지원, 구축 비용)

16. 미들웨어 현행 시스템 분석: 가성기구(성능 측면: 가용성, 성능 / 지원 측면 - 기술 지원, 구축 비용)


17. 요구사항 확인
 - 요구공학: 사용자의 요구가 반영된 시스템을 개발하기 위하여 사용자 요구사항에 대한 도출, 분석, 명세, 확인 및 검증하는 구조화된 활동
 - 요구공학의 목적: 이해관계자 사이 효과적인 의사소통 수단 제공, 공통된 이해 설정, 요구사항 누락 방지 및 이해 오류로 인한 불필요한 비용 절감, 요구사항 변경 추적, 개발 비용 시간 절약
 - 요구사항의 분류: 기능적 요구사항(특성: 기완일 - 기능성, 완전성, 일관성) / 비기능적 요구사항(신사효유이보품제 - 신뢰성, 사용성, 효율성, 유지보수성, 이식성, 보안성, 품질 관련 요구사항, 제약사항)
 
18. 요구공학 프로세스: 도분명확(도출, 분석, 명세, 확인)

19. 요구사항 도출단계: 소프트웨어가 해결해야할 문제를 이해하고, 고갱르ㅗ 부터 제시되는 추상적 요구에 대해 관련 정보를 식별하고 수집방법 결정, 요구사항 구체적으로 표현하는 단계
 주요기법: 인터뷰, 브레인스토밍, 델파이, 롤 플레잉, 워크숍, 설문조사

20 요구사항 분석 단계: 요구사항 분석 단계는 추출된 요구사항에 대해 충돌, 중복, 누락 등의 분석을 통해 완전성과 일관성을 확보하는 단계
 분석 단계 절차: 요구사항 분류 -> 개념 모델링 생성 및 분석 -> 요구사항 할당 -> 요구사항 협상 -> 정형분석
 분석 단계 기법: 자료 흐름 지향 분석, 객체 지향 분석
 분석기술: 청취, 인터뷰와 질문, 분석, 중재, 관찰, 작성, 조직, 모델 작성

21. 요구사항 명세 단계: 체계적으로 검토, 평가, 승인될 수 있는 문서를 작성
 주요기법: 비정형 명세 기법, 정형 명세 기법
 산출물: 요구사항 명세서
 명세 원리 및 검증 항목: 명완검일수추개(명확성, 완전성, 검증 가능성, 일관성, 수정 용이성, 추적 가능성, 개발 후 이용성)

22. 요구사항 확인 및 검증 단계: 사용자의 요구가 올바르게 기술 되었는지에 대한 검토 / 요구사항을 이해했는지 확인(Validation)하고 욕사항 문서가 회사 표준에 적합한지, 일관성을 만족하는지, 완전한지 검증(Verification) 해야한다.

 ㄴ 요구사항 확인 및 검증 절차: 요구사항 목록 확인, 정의서 작성 여부 확인, 비기능적 요구사항 확인, 타 시스템 연계 및 인터페이스 요구사항 확인
 ㄴ 요구사항 확인 및 검증 단계의 주요기법 및 산출물: 
   - 요구사항 검토, 정형 기술 검토 활용(동료 검토, 워크스루, 인스펙션), 프로토 타이핑 활용, 모델 검증, 테스트 케이스 및 테스트를 통한 확인, CASE 도구 활용 검증, 베이스라인을 통한 검증, 요구사항 추적표

 - 상세 정형 기술 검토 기법: 관리 리뷰, 기술 리뷰, 인스펙션, 워크 스루, 감사

23. 요구사항 관리 단계: 프로젝트 진행 과정에서 발생하는 요구사항의 변경에 대해 일치성과 무결성을 제공하기 위해 변경제어와 추적 등 일련의 관리를 수행하는 활동
 주요산출물: 요구사항 변경요청서, 변경 승인서, 추적표

 - 요구사항 관리 단계 절차: 협기변확(요구사항 협상 -> 요구사항 기준선 설정 -> 요구사항 변경관리 -> 요구사항 확인 및 검증)

24. 분석모델 검증: 요구사항 도출 기법을 활용하여 업무 분석가가 제시한 분석 모델에 대해서 확인하는 활동
 ㄴ 분석모델 검증 방법: 유스케이스 모델 검증, 개념 수준의 분석 클래스 검증, 분석 클래스 검증


25. UI 요구사항 확인
 UI(User Interface) - 사용자와 시스템 사이에서 의사소통할 수 있도록 고안된 물리적, 가상의 매개체이다. 정보기기나 소프트웨어의 화면 등에서 사람이 접하게 되는 화면
 UX(User eXperience) - 제품과 시스템, 서비스 드응ㄹ 사용자가 직/간접적으로 경험하면서 느끼고 생각하는 총체적 경험

26. UI 유형: CLI, GUI, NUI, OUI
 CLI - 정적인 텍스트 기반, GUI - 그래픽 반응 기반, NUI - 직관적 사용자 반응 기반, OUI - 유기적 상호작용 기반
27. UI 설계원칙: 직유학유(직관성, 유효성, 학습성, 유연성)

28. UI 설계지침: 사일단결 가표접명오(사용자 중심, 일관성, 단순성, 결과 예측 가능, 가시성, 표준화, 접근성, 명확성, 오류 발생 해결)

29. UI 품질 요구사항: 기신사효유이(기능성, 신뢰성, 사용성, 효율성, 유지보수성, 이식성)
 
30. UI 표준: 디자인 철학과 원칙 기반 하에 전체 시스템에 공통으로 적용되는 화면 간 이동, 화면구성 등에 관한 규약
 ㄴ UI 표준 구성: 액정스패조(전체적인 UX원칙, 정책 및 철학, UI 스타일 가이드, uI 패턴 모델 정의, UI표준 수립을 위한 조직 구성
 ㄴ CRUD 방식: 대부분의 소프트웨어가 가지는 기본적인 데이터 처리 기능인 Create, Read, Update, Delete를 묶어서 이르는 말


  